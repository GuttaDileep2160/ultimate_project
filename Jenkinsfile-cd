pipeline{

    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndestroy\ndestroyekscluster', description: 'create/update or destroy the eks cluster')
        string(name: 'cluster', defaultValue: 'my-eks', description: 'EKS Cluster name')
         string(name: 'region', defaultValue: 'us-east-1', description: 'EKS Cluster region')
    }
    environment{
        ACCESS_KEY = credentials('aws_access_key_id')
        SECRET_KEY = credentials('aws_secret_access_key')
    }

    stages{

        stage('Git Checkout'){

            steps{

                script{
                    
                    git branch: 'main', url: 'https://github.com/GuttaDileep2160/ultimate_project.git'
                }
            }
        }

        stage('eks cluster connect'){//jenkins trying to eks cluster

            steps{

                script{
                    
                    sh """
                            aws configure set aws_access_key_id "$ACCESS_KEY"
                            aws configure set aws_secret_access_key "$SECRET_KEY"
                            aws configure set region ""
                            aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                            """;
                }
            }
        }

        stage('eks deployment'){
            when { expression { params.action == 'create' } }
            steps{
                 
                script{
                    def apply = false
                    try{
                        input message: 'Please confirm the apply to inititate the deployments', ok: 'Ready to apply the config'
                        apply = true
                    }
                    catch(err){
                        apply = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        sh "kubectl apply -f deployment.yaml"
                    }
                    
                }
            }
        }

        stage('eks deployment Destroy'){
            when { expression { params.action == 'destroy' } }
            steps{
                 
                script{
                    def destroy = false
                    try{
                        input message: 'Please confirm the destroy to delete the deployments', ok: 'Ready to destroy the config'
                        destroy = true
                    }
                    catch(err){
                        destroy = false
                        CurrentBuild.result = 'UNSTABLE'
                    }
                    if(destroy){
                        sh "kubectl delete -f deployment.yaml"
                    }
                    
                }
            }
        }
    }
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "guttadileep1997@gmail.com";  
		}
}
}
    